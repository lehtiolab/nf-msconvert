/*
 * -------------------------------------------------
 *  lehtiolab/nf-msconvert Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
  outdir = './results'
  name = false
  help = false
  tracedir = "${params.outdir}/pipeline_info"
  awsqueue = false
  awsregion = 'eu-west-1'
  external_config_version = 'master'

  mzmltool = 'msconvert'
  reportout = false
  md5out = false

  centroid = 2
  options = ''
  filters = ''
  raws = ''
}


// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
  lehtio { 
    includeConfig "https://raw.githubusercontent.com/lehtiolab/static-resources/${params.external_config_version}/nf-configs/lehtio.config"
  }

  pdc_dardel {
    includeConfig "https://raw.githubusercontent.com/nf-core/configs/refs/heads/master/conf/pdc_kth.config"
    includeConfig "https://raw.githubusercontent.com/lehtiolab/static-resources/${params.external_config_version}/nf-configs/pdc_dardel.config"
  }

  docker {
    docker.enabled = true 
    docker.fixOwnership = true
  }
  singularity {
    singularity.enabled = true
  }
}


// Capture exit codes from upstream processes when piping (default is /bin/bash -eu)
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = params.reportout
  overwrite = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = params.reportout
  overwrite = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = params.reportout
  overwrite = true
  file = "${params.tracedir}/execution_trace.txt"
}

manifest {
  name = 'lehtiolab/nf-msconvert'
  author = 'Jorrit Boekel'
  homePage = 'https://github.com/lehtiolab/nf-msconvert'
  description = 'Runs msconvert in docker to convert RAW to mzML'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.32.0'
  version = '1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
